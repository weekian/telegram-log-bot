{"version":3,"sources":["../src/bot.js"],"names":["Bot","Telegram","token","env","database","addedToGroupHandler","commands","privateCommands","groupCommands","bot","db","Person","GroupChat","Session","registerPrivateCommands","registerGroupCommands","registerCommands","handleAddedToGroup","forEach","command","name","ctx","process","message","from","reply","isPrivateChat","chat","handler","on","isAddedToGroupChat","group_chat_created","new_chat_members","some","e","id","options","type","telegram","getMe","botInfo","username","startPolling"],"mappings":"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","sourcesContent":["/*\nNote\nIf ctx.message.group_chat_created is true means create with group chat\nIf ctx.message.new_chat_members contains bot then is added to group chat\nIf ctx.message.left_chat_member is bot's id then bot is deleted\n */\n\nexport default class Bot {\n    constructor(\n        Telegram,\n        token,\n        env,\n        database,\n        addedToGroupHandler,\n        commands = [],\n        privateCommands = [],\n        groupCommands = []\n    ) {\n        // Initialize Telegram Bot\n        this.bot = new Telegram(token);\n\n        // Store database object and related Models\n        this.database = database.db;\n        this.Person = database.Person;\n        this.GroupChat = database.GroupChat;\n        this.Session = database.Session;\n\n        // Registering of telegram commands\n        this.registerPrivateCommands(privateCommands);\n        this.registerGroupCommands(groupCommands);\n        this.registerCommands(commands);\n        this.handleAddedToGroup(addedToGroupHandler);\n    }\n\n    // Command handlers for all types of chats\n    registerCommands(commands) {\n        commands.forEach((command) => {\n            this.bot.command(command.name, async (ctx) => {\n                ctx.reply(\n                    await command.process({\n                        message: ctx.message,\n                        from: ctx.from,\n                        database: this.database,\n                        Person: this.Person,\n                        GroupChat: this.GroupChat,\n                        Session: this.Session,\n                    })\n                );\n            });\n        }, this);\n    }\n\n    // Command handlers for private chats\n    registerPrivateCommands(privateCommands) {\n        privateCommands.forEach((command) => {\n            this.bot.command(command.name, async (ctx) => {\n                if (this.isPrivateChat(ctx.chat)) {\n                    ctx.reply(\n                        await command.process({\n                            message: ctx.message,\n                            from: ctx.from,\n                            database: this.database,\n                            Person: this.Person,\n                            GroupChat: this.GroupChat,\n                            Session: this.Session,\n                        })\n                    );\n                } else {\n                    ctx.reply(\n                        \"Oops, this command is reserved for private chats only. /help if unsure\"\n                    );\n                }\n            });\n        }, this);\n    }\n\n    // Command handlers for group chats\n    registerGroupCommands(groupCommands) {\n        groupCommands.forEach((command) => {\n            this.bot.command(command.name, async (ctx) => {\n                if (!this.isPrivateChat(ctx.chat)) {\n                    ctx.reply(\n                        await command.process({\n                            database: this.database,\n                            Person: this.Person,\n                            GroupChat: this.GroupChat,\n                            Session: this.Session,\n                        })\n                    );\n                } else {\n                    ctx.reply(\n                        \"Oops, this command is reserved for group chats only. /help if unsure\"\n                    );\n                }\n            });\n        }, this);\n    }\n\n    // Command handlers for add to group\n    handleAddedToGroup(handler) {\n        this.bot.on(\"message\", async (ctx) => {\n            if (this.isAddedToGroupChat(ctx.message)) {\n                ctx.reply(\n                    await handler.process({\n                        database: this.database,\n                        Person: this.Person,\n                        GroupChat: this.GroupChat,\n                        Session: this.Session,\n                    })\n                );\n            }\n        });\n    }\n\n    isAddedToGroupChat(message) {\n        return (\n            !!message &&\n            (message.group_chat_created ||\n                (!!message.new_chat_members &&\n                    message.new_chat_members.some(\n                        (e) => e.id === this.bot.options.id\n                    )))\n        );\n    }\n\n    isPrivateChat(chat) {\n        return !!chat && chat.type === \"private\";\n    }\n\n    async start() {\n        // Configure to group chat commands that contain bot username\n        const botInfo = await this.bot.telegram.getMe();\n        this.bot.options.username = botInfo.username;\n        this.bot.options.id = botInfo.id;\n\n        // Starts listening for messages\n        this.bot.startPolling();\n    }\n}\n"],"file":"bot.js"}