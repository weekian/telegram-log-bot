{"version":3,"sources":["../../src/db/index.js"],"names":["url","env","Promise","resolve","reject","db","Sequelize","timezone","Person","import","__dirname","Session","GroupChat","belongsToMany","through","hasOne","hasMany","forceDrop","sync","force","then","catch","err"],"mappings":";;;;;;;;;AAAA;;AACA;;eAEe,kBAACA,GAAD,EAAMC,GAAN,EAAc;AACzB,SAAO,IAAIC,iBAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC;AACA,QAAMC,EAAE,GAAG,IAAIC,kBAAJ,CAAcN,GAAd,EAAmB;AAC1BO,MAAAA,QAAQ,EAAE;AADgB,KAAnB,CAAX,CAFoC,CAMpC;;AACA,QAAMC,MAAM,GAAGH,EAAE,CAACI,MAAH,WAAaC,SAAb,oBAAf;AACA,QAAMC,OAAO,GAAGN,EAAE,CAACI,MAAH,WAAaC,SAAb,qBAAhB;AACA,QAAME,SAAS,GAAGP,EAAE,CAACI,MAAH,WAAaC,SAAb,uBAAlB,CAToC,CAWpC;;AACAE,IAAAA,SAAS,CAACC,aAAV,CAAwBL,MAAxB,EAAgC;AAC5BM,MAAAA,OAAO,EAAE;AADmB,KAAhC;AAIAN,IAAAA,MAAM,CAACK,aAAP,CAAqBD,SAArB,EAAgC;AAC5BE,MAAAA,OAAO,EAAE;AADmB,KAAhC,EAhBoC,CAoBpC;;AACAH,IAAAA,OAAO,CAACI,MAAR,CAAeP,MAAf;AACAA,IAAAA,MAAM,CAACQ,OAAP,CAAeL,OAAf,EAtBoC,CAwBpC;;AACA,QAAMM,SAAS,GAAGhB,GAAG,KAAK,YAA1B;AACAI,IAAAA,EAAE,CAACa,IAAH,CAAQ;AACJC,MAAAA,KAAK,EAAEF;AADH,KAAR,EAGKG,IAHL,CAGU,YAAM;AACRjB,MAAAA,OAAO,CAAC;AACJE,QAAAA,EAAE,EAAFA,EADI;AAEJG,QAAAA,MAAM,EAANA,MAFI;AAGJG,QAAAA,OAAO,EAAPA,OAHI;AAIJC,QAAAA,SAAS,EAATA;AAJI,OAAD,CAAP;AAMH,KAVL,EAWKS,KAXL,CAWW,UAACC,GAAD,EAAS;AACZ,aAAOlB,MAAM,CAACkB,GAAD,CAAb;AACH,KAbL;AAcH,GAxCM,CAAP;AAyCH,C","sourcesContent":["import Sequelize from \"sequelize\";\nimport Promise from \"bluebird\";\n\nexport default (url, env) => {\n    return new Promise((resolve, reject) => {\n        // ---------- Database Initialization ----------\n        const db = new Sequelize(url, {\n            timezone: \"+08:00\",\n        });\n\n        // ---------- Model Definitions ----------------\n        const Person = db.import(`${__dirname}/models/person`);\n        const Session = db.import(`${__dirname}/models/session`);\n        const GroupChat = db.import(`${__dirname}/models/GroupChat`);\n\n        // ---------- Model Association ----------------\n        GroupChat.belongsToMany(Person, {\n            through: \"member\",\n        });\n\n        Person.belongsToMany(GroupChat, {\n            through: \"member\",\n        });\n\n        // Defines one to many relationship for Person has many session and session belongs to one Person\n        Session.hasOne(Person);\n        Person.hasMany(Session);\n\n        // ---------- (Optional) Creation of tables ----\n        const forceDrop = env !== \"production\";\n        db.sync({\n            force: forceDrop,\n        })\n            .then(() => {\n                resolve({\n                    db,\n                    Person,\n                    Session,\n                    GroupChat,\n                });\n            })\n            .catch((err) => {\n                return reject(err);\n            });\n    });\n};\n"],"file":"index.js"}